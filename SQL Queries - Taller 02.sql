--Query 1:
SELECT
	F.TITLE
FROM
	FILM AS F
ORDER BY
	F.TITLE
LIMIT
	5;

--Query 2 :
--ESTANDAR
SELECT
	CUSTOMER.CUSTOMER_ID,
	CUSTOMER.FIRST_NAME,
	PAYMENT.AMOUNT,
	PAYMENT.PAYMENT_DATE
FROM
	CUSTOMER
	INNER JOIN PAYMENT ON CUSTOMER.CUSTOMER_ID = PAYMENT.CUSTOMER_ID
ORDER BY
	PAYMENT.PAYMENT_DATE DESC;

-- WITH USING
SELECT
	CUSTOMER.CUSTOMER_ID,
	CUSTOMER.FIRST_NAME,
	PAYMENT.AMOUNT,
	PAYMENT.PAYMENT_DATE
FROM
	CUSTOMER
	INNER JOIN PAYMENT USING (CUSTOMER_ID)
ORDER BY
	PAYMENT.PAYMENT_DATE DESC;

-- Query 3:
-- ESTANDR
SELECT
	FILM.FILM_ID,
	FILM.TITLE,
	INVENTORY.INVENTORY_ID
FROM
	FILM
	LEFT JOIN INVENTORY ON FILM.FILM_ID = INVENTORY.FILM_ID
ORDER BY
	FILM.TITLE;

--USING
SELECT
	FILM.FILM_ID,
	FILM.TITLE,
	INVENTORY.INVENTORY_ID
FROM
	FILM
	LEFT JOIN INVENTORY USING (FILM_ID)
ORDER BY
	FILM.TITLE;

-- Query 4:
SELECT
	FILM.FILM_ID,
	FILM.TITLE,
	INVENTORY.INVENTORY_ID
FROM
	FILM
	LEFT JOIN INVENTORY ON FILM.FILM_ID = INVENTORY.FILM_ID
WHERE
	INVENTORY.INVENTORY_ID IS NULL
ORDER BY
	FILM.TITLE;

--Query 5:
SELECT
	FILM.FILM_ID,
	FILM.TITLE,
	INVENTORY.INVENTORY_ID
FROM
	INVENTORY
	RIGHT JOIN FILM ON INVENTORY.FILM_ID = FILM.FILM_ID
ORDER BY
	FILM.TITLE ASC;

--Query 6:
SELECT
	FILM.FILM_ID,
	FILM.TITLE
FROM
	INVENTORY
	RIGHT JOIN FILM USING (FILM_ID)
WHERE
	INVENTORY.INVENTORY_ID IS NULL
ORDER BY
	FILM.TITLE ASC;

-- Query 7:
SELECT
	F1.FILM_ID AS FILM1_ID,
	F1.TITLE AS FILM1_TITLE,
	F2.FILM_ID AS FILM2_ID,
	F2.TITLE AS FILM2_TITLE,
	F1.LENGTH AS FILM_LENGTH
FROM
	FILM F1
	INNER JOIN FILM F2 ON F1.LENGTH = F2.LENGTH
WHERE
	F1.FILM_ID > F2.FILM_ID
ORDER BY
	F1.FILM_ID,
	F2.FILM_ID;

-- Query 8:
SELECT
	STAFF.FIRST_NAME,
	STAFF.LAST_NAME,
	STORE.STORE_ID
FROM
	STAFF
	FULL OUTER JOIN STORE ON STAFF.STORE_ID = STORE.STORE_ID;

--Query 9:
-- TABLA NO EXISTE
--Query 10:
-- TABLA NO EXISTE
--Query 11:
-- TABLA NO EXISTE;
--Query 12:
WITH
	CUSTOMER_AMOUNT AS (
		SELECT
			CUSTOMER_ID,
			SUM(AMOUNT) TOTAL
		FROM
			PAYMENT
		GROUP BY
			CUSTOMER_ID
		ORDER BY
			CUSTOMER_ID
	)
SELECT
	CUSTOMER.FIRST_NAME,
	CUSTOMER.LAST_NAME,
	CUSTOMER_AMOUNT.TOTAL
FROM
	CUSTOMER
	INNER JOIN CUSTOMER_AMOUNT USING (CUSTOMER_ID);

--Query 13:
SELECT
	CUSTOMER_ID,
	SUM(AMOUNT) AS TOTAL_PAYMENT
FROM
	PAYMENT
GROUP BY
	CUSTOMER_ID
ORDER BY
	CUSTOMER_ID;

--Query 14:
SELECT
	CUSTOMER_ID,
	SUM(AMOUNT) AS TOTAL_PAYMENT
FROM
	PAYMENT
GROUP BY
	CUSTOMER_ID
ORDER BY
	TOTAL_PAYMENT DESC;

--Query 15:
SELECT
	CONCAT(CUSTOMER.FIRST_NAME, ' ', CUSTOMER.LAST_NAME) AS FULL_NAME,
	SUM(PAYMENT.AMOUNT) AS TOTAL_PAYMENT
FROM
	CUSTOMER
	JOIN PAYMENT ON CUSTOMER.CUSTOMER_ID = PAYMENT.CUSTOMER_ID
GROUP BY
	CUSTOMER.CUSTOMER_ID,
	FULL_NAME
ORDER BY
	TOTAL_PAYMENT DESC;

--Query 16:
SELECT
	STAFF_ID,
	COUNT(PAYMENT_ID) AS PAYMENT_COUNT
FROM
	PAYMENT
GROUP BY
	STAFF_ID
ORDER BY
	STAFF_ID;

--Query 17:
SELECT
	CUSTOMER_ID,
	STAFF_ID,
	SUM(AMOUNT) AS TOTAL_PAYMENT
FROM
	PAYMENT
GROUP BY
	CUSTOMER_ID,
	STAFF_ID
ORDER BY
	CUSTOMER_ID;

--Query 18:
SELECT
	DATE (PAYMENT_DATE) AS PAYMENT_DAY,
	SUM(AMOUNT) AS DAILY_TOTAL,
	COUNT(PAYMENT_ID) AS TRANSACTION_COUNT
FROM
	PAYMENT
GROUP BY
	PAYMENT_DAY
ORDER BY
	PAYMENT_DAY DESC;

--Query 19:
SELECT
	CUSTOMER_ID,
	SUM(AMOUNT) AS TOTAL_PAYMENT
FROM
	PAYMENT
GROUP BY
	CUSTOMER_ID
HAVING
	SUM(AMOUNT) > 200
ORDER BY
	TOTAL_PAYMENT DESC;

--Query 20:
SELECT
	STORE_ID,
	COUNT(DISTINCT CUSTOMER_ID) AS CUSTOMER_COUNT
FROM
	CUSTOMER
GROUP BY
	STORE_ID
HAVING
	--CUSTOMER_COUNT > 300
	COUNT(DISTINCT CUSTOMER_ID) > 300
ORDER BY
	STORE_ID;

--Query extra:
SELECT
	*
FROM
	STORE;